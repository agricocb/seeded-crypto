#pragma once

#include <string>
#include "sodium-buffer.hpp"

/**
 * @brief A SymmetricKey can be used to seal and unseal messages.
 * This SymmmetricKey class can be (re) derived from a seed using
 * set of key-derivation specified options in JSON format. RefKDO.
 * So, you can use this symmetric-key to seal a message, throw the
 * key away, and re-generate the key when you need to unseal the
 * message so long as you still have the original seed and
 * keyDerivationOptionsJson.
 *  
 * Sealing a message (_plaintext_) creates a _ciphertext which contains
 * the message but from which observers who do not have the PrivateKey
 * cannot discern the contents of the message.
 * Sealing also provides integrity-protection, which will preven the
 * message from being unsealed if it is modified.
 * We use the verbs seal and unseal, rather than encrypt and decrypt,
 * because the encrypting alone does not confer that the message includes
 * an integrity (message authentication) code to prove that the ciphertext
 * has not been tampered with.
 * 
 * The seal operation is built on LibSodium's crypto_secretbox_easy function,
 * but despite it's name the construct isn't as easy as it should be.
 * The caller must store both the ciphertext AND a 24-byte nonce
 * (crypto_secretbox_NONCEBYTES = 24).
 * Hence, the SymmetricKey seal operation outputs a _composite_ ciphertext
 * containing the nonce followed by the "secret box" ciphertext generated by LibSodium.
 * Since the "secret box" is 16 bytes longer than the message size
 * (crypto_secretbox_MACBYTES = 16),
 * the composite ciphertext is is 40 bytes longer than the message length
 * (24 for then nonce, plus the 16 added to create the secret box)
 */
class SymmetricKey {

  public:
  /**
   * @brief The binary representation of the symmetric key
   * 
   */
  const SodiumBuffer keyBytes;
  /**
   * @brief A JSON string storing the options used to derive the key from a seed. RefKDO
   */
  const std::string keyDerivationOptionsJson;

  /**
   * @brief Construct a SymmetricKey from its members
   */
  SymmetricKey(
    const SodiumBuffer& keyBytes,
    std::string keyDerivationOptionsJson
  );

  /**
   * @brief Construct a SymmetricKey by copying another one.
   */
  SymmetricKey(
    const SymmetricKey &other
  );

  /**
   * @brief Construct (reconstitute) a SymmetricKey from its JSON
   * representation
   * 
   * @param symmetricKeyAsJson A SymmetricKey serialized in JSON format
   * via a previous call to toJson
   */
  SymmetricKey(
    const std::string& symmetricKeyAsJson
  );

    /**
   * @brief Construct a new SymmetricKey by (re)deriving it from a seed string
   * and a set of key-derivation options in JSON format. RefKDO
   * 
   * @param seedString The private seed which is used to generate the key.
   * Anyone who knows (or can guess) this seed can re-generate the key
   * by passing it along with the keyDerivationOptionsJson.
   * @param keyDerivationOptionsJson The key-derivation options in JSON format. RefKDO
   */
  SymmetricKey(
    const std::string& seedString,
    const std::string &keyDerivationOptionsJson
  );

  /**
   * @brief Seal a plaintext message
   * 
   * @param message The plaintxt message to seal 
   * @param messageLength The length of the plaintext message in bytes
   * @param postDecryptionInstructionsJson If this optional string is
   * passed, the same string must be passed to unseal the message.
   * RefPDI.
   * @return const std::vector<unsigned char> 
   */
  const std::vector<unsigned char> seal(
    const unsigned char* message,
    const size_t messageLength,
    const std::string &postDecryptionInstructionsJson = ""
  ) const;

  /**
   * @brief Seal a plaintext message
   * 
   * @param message The plaintxt message to seal 
   * @param postDecryptionInstructionsJson If this optional string is
   * passed, the same string must be passed to unseal the message.
   * RefPDI.
   * @return const std::vector<unsigned char> 
   */  
  const std::vector<unsigned char> seal(
    const SodiumBuffer& message,
    const std::string& postDecryptionInstructionsJson = ""
  ) const;


  /**
   * @brief Unseal a message 
   * 
   * @param ciphertext The sealed message to be unsealed
   * @param ciphertextLength The length of the sealed message
   * @param postDecryptionInstructionsJson If this optional value was
   * set during the SymmetricKey::seal operation, the same value must
   * be provided to unseal the message or the operation will fail.
   * @return const SodiumBuffer 
   * 
   * @exception CryptographicVerificationFailureException Thrown if the ciphertext
   * is not valid and cannot be unsealed.
   */
  const SodiumBuffer unseal(
    const unsigned char* ciphertext,
    const size_t ciphertextLength,
    const std::string &postDecryptionInstructionsJson = ""
  ) const;

  /**
   * @brief Unseal a message 
   * 
   * @param ciphertext The sealed message to be unsealed
   * @param postDecryptionInstructionsJson If this optional value was
   * set during the SymmetricKey::seal operation, the same value must
   * be provided to unseal the message or the operation will fail.
   * @return const SodiumBuffer 
   * 
   * @exception CryptographicVerificationFailureException Thrown if the ciphertext
   * is not valid and cannot be unsealed.
   */
  const SodiumBuffer unseal(
    const std::vector<unsigned char> &ciphertext,
    const std::string& postDecryptionInstructionsJson = ""
  ) const;

  /**
   * @brief Serialize this object to a JSON-formatted string
   * 
   * It can be reconstituted by calling the constructor with this string.
   * 
   * @param indent The number of characters to indent the JSON (optional)
   * @param indent_char The character with which to indent the JSON (optional)
   * @return const std::string A SymmetricKey serialized to JSON format.
   */
  const std::string toJson(
    int indent = -1,
    const char indent_char = ' '
  ) const;

protected:

  /**
   * @brief Internal implementation of JSON parser for the JSON contructor
   */
  static SymmetricKey fromJson(
    const std::string& symmetricKeyAsJson
  );

  /**
   * @brief Internal implementation of unseal
   */
  const SodiumBuffer unsealMessageContents(
    const unsigned char* ciphertext,
    const size_t ciphertextLength,
    const std::string &postDecryptionInstructionsJson = ""
  ) const;

};